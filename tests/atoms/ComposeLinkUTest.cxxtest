/*
 * tests/atoms/ComposeLinkUTest.cxxtest
 *
 * Copyright (C) 2017 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/core/ComposeLink.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

// Test LambdaLink.
//
class ComposeLinkUTest :  public CxxTest::TestSuite
{
private:
	AtomSpace _as;

public:
	ComposeLinkUTest()
	{
		logger().set_print_to_stdout_flag(true);
		logger().set_level(Logger::DEBUG);
	}

	void setUp() {}

	void tearDown() {}

	void test_execute_1();
	void test_execute_2();
	// TODO: add test with nested compositions
};

void ComposeLinkUTest::test_execute_1()
{
	Handle
		P = an(PREDICATE_NODE, "P"),
		X = an(VARIABLE_NODE, "$X"),
		Y = an(VARIABLE_NODE, "$Y"),
		g = al(LAMBDA_LINK, al(EVALUATION_LINK, P, X)),
		f = al(LAMBDA_LINK, al(INHERITANCE_LINK, X, Y)),
		comp = al(COMPOSE_LINK, g, f);

	ComposeLinkPtr comp_cl = ComposeLinkCast(comp);
	Handle executed_comp = comp_cl->execute(),
		expected = al(LAMBDA_LINK,
		              al(EVALUATION_LINK, P, al(INHERITANCE_LINK, X, Y)));

	logger().debug() << "executed_comp = " << oc_to_string(executed_comp);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(executed_comp, expected));
}

void ComposeLinkUTest::test_execute_2()
{
	Handle
		X = an(VARIABLE_NODE, "$X"),
		Y = an(VARIABLE_NODE, "$Y"),
		Z = an(VARIABLE_NODE, "$Z"),
		g = al(LAMBDA_LINK, al(EVALUATION_LINK, X, Y)),
		f1 = al(PROJECT_LINK, an(NUMBER_NODE, "0")),
		f2 = al(LAMBDA_LINK,
		        al(VARIABLE_LIST, X, Y, Z),
		        al(INHERITANCE_LINK, Y, Z)),
		comp = al(COMPOSE_LINK, g, al(LIST_LINK, f1, f2));

	ComposeLinkPtr comp_cl = ComposeLinkCast(comp);
	Handle executed_comp = comp_cl->execute(),
		expected = al(LAMBDA_LINK,
		              al(VARIABLE_LIST, X, Y, Z),
		              al(EVALUATION_LINK, X, al(INHERITANCE_LINK, Y, Z)));

	logger().debug() << "executed_comp = " << oc_to_string(executed_comp);
	logger().debug() << "expected = " << oc_to_string(expected);

	TS_ASSERT(content_eq(executed_comp, expected));
}

#undef al
#undef an
